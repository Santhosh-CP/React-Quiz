{"version":3,"sources":["images/harrison-hargrave-46M8KAnUBlI-unsplash.jpg","API.ts","utils.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","App.styles.ts","App.tsx","index.tsx"],"names":["module","exports","Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","console","log","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnswer","questionNumber","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","key","correctAnswer","disabled","value","onClick","GlobalStyle","createGlobalStyle","Background","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startQuiz","EASY","newQuestions","length","undefined","e","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ecfbc2cd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/harrison-hargrave-46M8KAnUBlI-unsplash.80c0cc9d.jpg\";","import { shuffleArray } from './utils'\r\n\r\nexport type Question = {\r\n    category: string;\r\n    correct_answer: string;\r\n    difficulty: string;\r\n    incorrect_answers: string[];\r\n    question: string;\r\n    type: string;\r\n};\r\n\r\nexport type QuestionState = Question & { answers: string[]};\r\n\r\nexport enum Difficulty {\r\n    EASY = \"easy\",\r\n    MEDIUM = \"medium\",\r\n    HARD = \"hard\"\r\n};\r\n\r\nexport const fetchQuizQuestions = async (amount: number, difficulty: Difficulty) => {\r\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\r\n    const data = await(await fetch(endpoint)).json();\r\n    console.log(data);\r\n    return data.results.map((question: Question) => (\r\n        {\r\n            ...question,\r\n            answers: shuffleArray([...question.incorrect_answers, question.correct_answer])\r\n        }));\r\n};","export const shuffleArray = (array: any[]) => \r\n    [...array].sort(() => Math.random() - 0.5);","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n    max-width: 1100px;\r\n    background: #ebfeff;\r\n    border-radius: 10px;\r\n    border: 2px solid #0085a3;\r\n    padding: 20px;\r\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n    text-align: center;\r\n\r\n    p {\r\n        font-size: 1rem;\r\n    }\r\n`\r\n\r\ntype ButtonWrapperProps = {\r\n    correct: boolean;\r\n    userClicked: boolean;\r\n};\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n    transition: all 0.3s ease;\r\n\r\n    :hover {\r\n        opacity: 0.8;\r\n    }\r\n\r\n    button {\r\n        cursor: pointer;\r\n        user-select: none;\r\n        font-size: 0.8rem;\r\n        widht: 100%;\r\n        height: 40px;\r\n        margin: 5px 0;\r\n        background: ${({ correct, userClicked }) =>\r\n        correct\r\n            ? 'linear-gradient(90deg, #56ffa4, #59bc86)'\r\n            : !correct && userClicked\r\n            ? 'linear-gradient(90deg, #ff5656, #c16868)'\r\n            : 'linear-gradient(90deg, #56ccff, #6eafb4)'};\r\n\r\n        border: 3px solid #fff;\r\n        box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\r\n        border-radius: 10px;\r\n        color: #fff;\r\n        text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\r\n    }\r\n`;","import React from 'react';\r\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles';\r\n\r\n// Types\r\nimport { AnswerObject } from '../App';\r\n\r\n\r\ntype Props = {\r\n    question: string;\r\n    answers: string[];\r\n    callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n    userAnswer: AnswerObject | undefined;\r\n    questionNumber: number;\r\n    totalQuestions: number;\r\n}\r\n\r\nconst QuestionCard: React.FC<Props> = ({\r\n    question,\r\n    answers,\r\n    callback,\r\n    userAnswer,\r\n    questionNumber,\r\n    totalQuestions\r\n}) => (\r\n        <Wrapper>\r\n            <p className=\"number\">\r\n                Question: {questionNumber} / {totalQuestions}\r\n            </p>\r\n            <p dangerouslySetInnerHTML={{ __html: question }} />\r\n            <div>\r\n                {answers.map((answer) => (\r\n                    <ButtonWrapper\r\n                        key={answer}\r\n                        correct={userAnswer?.correctAnswer === answer}\r\n                        userClicked={userAnswer?.answer === answer}\r\n                    >\r\n                        <button disabled={userAnswer ? true : false} value={answer} onClick={callback}>\r\n                            <span dangerouslySetInnerHTML={{ __html: answer }} />\r\n                        </button>\r\n                    </ButtonWrapper>\r\n                ))}\r\n            </div>\r\n        </Wrapper>\r\n    );\r\n\r\nexport default QuestionCard;","import styled, {createGlobalStyle } from 'styled-components';\r\n\r\n//import Background from './images/harrison-hargrave-46M8KAnUBlI-unsplash.jpg';\r\nimport Background from '.\\\\images\\\\harrison-hargrave-46M8KAnUBlI-unsplash.jpg';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        height: 100%;\r\n    }\r\n    \r\n    body {\r\n        background-image: url(${Background});\r\n        background-size: cover;\r\n        margin: 0;\r\n        padding: 0 20px;\r\n        display: flex;\r\n        justify-content: center;\r\n    }\r\n\r\n    * {\r\n        box-sizing: border-box;\r\n        font-family: 'Montserrat';\r\n    }\r\n\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items center;\r\n\r\n    > p {\r\n        color: #fff;\r\n    }\r\n\r\n    .score {\r\n        color: #fff;\r\n        font-size: 2rem;\r\n        margin: 0;\r\n    }\r\n\r\n    h1 {\r\n        font-family: Fascinate Inline;\r\n        background-image: linear-gradient(180deg, #fff, #324521);\r\n        background-size: 100%;\r\n        background-clip: text;\r\n        -webkit-background-clip: text;\r\n        -webkit-text-fill-color: transparent;\r\n        -moz-background-clip: text;\r\n        -moz-text-fill-color: transparent;\r\n        filter: drop-shadow(2px 2px #0085a3);\r\n        font-size: 85px;\r\n        text-align: center;\r\n        margin: 20px;\r\n        font-weight: 400;\r\n    }\r\n\r\n    .start, .next {\r\n        cursor: pointer;\r\n        background: linear-gradient(180deg, #fff, #ffcc91);\r\n        border: 2px solid #d38558;\r\n        box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n        border-radius: 10px;\r\n        height: 40px;\r\n        margin: 20px 0;\r\n        padding: 0 40px;\r\n    }\r\n\r\n    .start {\r\n        max-width: 200px;\r\n    }\r\n\r\n`","import React, { useState } from 'react';\nimport { fetchQuizQuestions } from './API';\n\n// Components\nimport QuestionCard from './components/QuestionCard';\n\n\n// Types\nimport { QuestionState, Difficulty } from './API';\n\n// Styles\nimport { GlobalStyle, Wrapper } from './App.styles';\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n}\n\n\n\nconst TOTAL_QUESTIONS = 10;\n\nconst App = () => {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  //console.log(fetchQuizQuestions(TOTAL_QUESTIONS, Difficulty.EASY));\n  console.log(questions);\n  const startQuiz = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY\n    );\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      const answer = e.currentTarget.value;\n\n      const correct = questions[number].correct_answer === answer;\n      if (correct) {\n        setScore(prev => prev + 1);\n      }\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers(prev => [...prev, answerObject]);\n    }\n\n\n  };\n\n  const nextQuestion = () => {\n    const nextQuestion = number + 1;\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    }\n    else {\n      setNumber(nextQuestion);\n    }\n\n  }\n\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper>\n        <h1>React Quiz</h1>\n        {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n          <button className=\"start\" onClick={startQuiz}>\n            Start\n          </button>\n        ) : null}\n        {!gameOver ? <p className=\"score\">Score : {score}</p> : null}\n        {loading && <p>Loading Questions...</p>}\n\n        {!loading && !gameOver && (\n          <QuestionCard\n            questionNumber={number + 1}\n            totalQuestions={TOTAL_QUESTIONS}\n            question={questions[number].question}\n            answers={questions[number].answers}\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\n            callback={checkAnswer}\n          />\n        )}\n\n        {!gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 ? (\n          <button className=\"next\" onClick={nextQuestion}>\n            Next Question\n          </button>\n        ) : null}\n      </Wrapper>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}